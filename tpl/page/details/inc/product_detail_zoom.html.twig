{% block details_productmain_zoom %}
    {% set imageCount = oView.getIcons()|length %}
    <div class="gallery">
        <div class="carousel">
            {% for iPicNr, oArtIcon in oView.getIcons() %}
                <input type="radio" class="gallery-helper" id="image{{ iPicNr }}" name="gallery-control"{% if loop.first %} checked{% endif %}>
            {% endfor %}

            {% if imageCount > 1 %}
                <div class="thumbnails">
                    {% for iPicNr, oArtIcon in oView.getIcons() %}
                        <label for="image{{ iPicNr }}" class="thumb">
                            <img loading="lazy" src="{{ oPictureProduct.getIconUrl(iPicNr)|raw }}" alt="{{ translate({ ident: 'PRODUCT_GALLERY_IMAGE_ALT', args: { 'count': iPicNr, 'title': oPictureProduct.oxarticles__oxtitle.value|striptags ~ ' ' ~ oPictureProduct.oxarticles__oxvarselect.value|striptags } }) }}" width="112" height="112">
                        </label>
                    {% endfor %}
                </div>
            {% endif %}

            <div class="wrap overflow-visible">
                {% for iPicNr, oArtIcon in oView.getIcons() %}
                    {% set sPictureName = oPictureProduct.getPictureFieldValue('oxpic', iPicNr) %}
                    {% set aPictureInfo = config.getMasterPicturePath('product/' ~ iPicNr ~ '/' ~ sPictureName)|getimagesize %}

                    <figure class="zoom-container">
                        <img src="{{ oPictureProduct.getMasterZoomPictureUrl(iPicNr)|raw }}" alt="{{ translate({ ident: 'PRODUCT_GALLERY_IMAGE_ALT', args: { 'count': iPicNr, 'title': oPictureProduct.oxarticles__oxtitle.value|striptags ~ ' ' ~ oPictureProduct.oxarticles__oxvarselect.value|striptags } }) }}" data-bs-toggle="modal" data-bs-target="#imageModal{{ iPicNr }}">
                        <div class="lens"></div>
                        <div class="zoom-result"><img src="" alt="Zoomed Image"></div>
                    </figure>

                {% endfor %}
            </div>
        </div>
    </div>
{% endblock %}

<style>
    /* Container for the zoomed image on the page */
    .zoom-container {
        position: relative;
        display: inline-block;
    }

    /* The actual image with zoom */
    .zoom-container img {
        width: 100%;
        height: auto;
        display: block;
    }

    /* Lens for zoom effect */
    .lens {
        position: absolute;
        border: 1px solid #d4d4d4;
        width: 100px;
        height: 100px;
        opacity: 0.4;
        background: rgba(255, 255, 255, 0.2);
        pointer-events: none;
        display: none; /* Hide the lens by default */
    }

    /* Container for the zoom result */
    .zoom-result {
        position: absolute;
        border: 1px solid #d4d4d4;
        width: 300px; /* Adjust the size as needed */
        height: 300px; /* Adjust the size as needed */
        overflow: hidden;
        display: none; /* Hide the result box by default */
        top: 50%;
        left: 100%; /* Position it to the right of the image */
        margin-left: 10px; /* Add some spacing between the image and the zoom result box */
        background-color: white; /* Ensure it's visible */
        z-index: 1000; /* Keep it above other elements */
    }

    .zoom-result img {
        position: absolute;
        width: auto;
        height: auto;
        transform-origin: top left;
        max-width: none !important;
        max-height: none !important;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        const zoomContainers = document.querySelectorAll('.zoom-container');

        zoomContainers.forEach(container => {
            const img = container.querySelector('img');
            const lens = container.querySelector('.lens');
            const result = container.querySelector('.zoom-result');
            const resultImg = result.querySelector('img');

            resultImg.src = img.src;

            img.addEventListener('mousemove', function(e) {
                lens.style.display = 'block';
                result.style.display = 'block';

                const rect = container.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                moveLens(e, lens, img, resultImg, rect, x, y);
            });

            img.addEventListener('mouseleave', function() {
                lens.style.display = 'none';
                result.style.display = 'none';
            });

            function moveLens(e, lens, img, resultImg, rect, x, y) {
                const cx = result.offsetWidth / lens.offsetWidth;
                const cy = result.offsetHeight / lens.offsetHeight;

                let lensX = x - lens.offsetWidth / 2;
                let lensY = y - lens.offsetHeight / 2;

                if (lensX < 0) lensX = 0;
                if (lensY < 0) lensY = 0;
                if (lensX > img.width - lens.offsetWidth) lensX = img.width - lens.offsetWidth;
                if (lensY > img.height - lens.offsetHeight) lensY = img.height - lens.offsetHeight;

                lens.style.left = `${lensX}px`;
                lens.style.top = `${lensY}px`;

                resultImg.style.width = `${img.width * cx}px`;
                resultImg.style.height = `${img.height * cy}px`;
                resultImg.style.transform = `translate(${-lensX * cx}px, ${-lensY * cy}px)`;
            }
        });
    });
</script>